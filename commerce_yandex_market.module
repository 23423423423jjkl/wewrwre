<?php

/**
 * @file
 * Provide user interface for Commerce Yandex Market settings.
 */

/**
 * Constant definitions.
 */
define('COMMERCE_YANDEX_MARKET_ENABLED', 1);
define('COMMERCE_YANDEX_MARKET_DISABLED', 0);
define('COMMERCE_YANDEX_MARKET_DIRECTORY', 'public://commerce_yandex_market');
define('COMMERCE_YANDEX_MARKET_FILE_NAME', 'commerce_yandex_market.xml');

/**
 * Implements hook_menu().
 */
function commerce_yandex_market_menu() {
  $items['admin/commerce/yandex-market'] = array(
    'title' => 'Yandex Market',
    'description' => 'Manage exports to Yandex Market.',
    'access arguments' => array('administer commerce yandex market'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_yandex_market_product_list'),
    'file' => 'commerce_yandex_market.admin.inc',
  );

  $items['admin/commerce/yandex-market/list'] = array(
    'title' => 'Product list',
    'file' => 'commerce_yandex_market.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/commerce/yandex-market/settings'] = array(
    'title' => 'Yandex Market settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_yandex_market_settings'),
    'access arguments' => array('administer commerce yandex market'),
    'file' => 'commerce_yandex_market.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/commerce/yandex-market/add'] = array(
    'title' => 'Add a product display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_yandex_market_add_form'),
    'access arguments' => array('administer commerce yandex market'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/commerce/yandex-market/import'] = array(
    'title' => 'Import a product display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_yandex_market_import_form'),
    'access arguments' => array('administer commerce yandex market'),
    'file' => 'commerce_yandex_market.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/commerce/yandex-market/edit/%commerce_yandex_market_cache'] = array(
    'title' => 'Edit a product display',
    'page callback' => 'commerce_yandex_market_edit_page',
    'page arguments' => array(4),
    'access arguments' => array('administer commerce yandex market'),
    'file' => 'commerce_yandex_market.admin.inc',
  );

  $items['admin/commerce/yandex-market/delete/%commerce_yandex_market_cache'] = array(
    'title' => 'Delete a product display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_yandex_market_delete_form', 4),
    'access arguments' => array('administer commerce yandex market'),
  );

  $items['admin/commerce/yandex-market/disable/%commerce_yandex_market_cache'] = array(
    'title' => 'Disable a product display',
    'page callback' => 'commerce_yandex_market_disable_display_page',
    'page arguments' => array(4),
    'access arguments' => array('administer commerce yandex market'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_yandex_market.admin.inc',
  );

  $items['admin/commerce/yandex-market/enable/%commerce_yandex_market_cache'] = array(
    'title' => 'Enable a product display',
    'page callback' => 'commerce_yandex_market_enable_display_page',
    'page arguments' => array(4),
    'access arguments' => array('administer commerce yandex market'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_yandex_market.admin.inc',
  );

  $items['admin/commerce/yandex-market/export/%commerce_yandex_market_cache'] = array(
    'title callback' => 'commerce_yandex_market_title_callback',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_yandex_market_export_form', 4),
    'access arguments' => array('administer commerce yandex market'),
    'file' => 'commerce_yandex_market.admin.inc',
  );

  $items['commerce_yandex_market/%commerce_yandex_market_cache'] = array(
    'page callback' => 'commerce_yandex_market_tokens_ajax_autocomplete',
    'page arguments' => array(1, 2),
    'access arguments' => array('administer commerce yandex market'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_yandex_market.pages.inc',
  );

  $items['yandex-market.xml'] = array(
    'page callback' => 'commerce_yandex_market_output_export',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_yandex_market.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_yandex_market_permission() {
  return array(
    'administer commerce yandex market' => array(
      'title' => t('Administer Commerce Yandex Market'),
      'description' => t('Allows you config Commerce Yandex Market'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function commerce_yandex_market_cron() {
  if (($threshold = variable_get('commerce_yandex_market_safe_threshold', DRUPAL_CRON_DEFAULT_THRESHOLD)) > 0) {
    $update_last = variable_get('commerce_yandex_market_update_last', NULL);
    if (!isset($update_last) || (REQUEST_TIME - $update_last > $threshold)) {
      commerce_yandex_market_generate_page();
      variable_set('commerce_yandex_market_update_last', REQUEST_TIME);
    }
  }
}

/**
 * Implements hook_theme().
 */
function commerce_yandex_market_theme() {
  return array(
    'commerce_yandex_market_autocomplete' => array(
      'render element' => 'element',
      'file' => 'commerce_yandex_market.theme.inc',
    ),
    'commerce_yandex_market_product_list' => array(
      'render element' => 'form',
      'file' => 'commerce_yandex_market.theme.inc',
    ),
    'commerce_yandex_market_add_form' => array(
      'render element' => 'form',
      'file' => 'commerce_yandex_market.theme.inc',
    ),
    'commerce_yandex_market_edit_form' => array(
      'render element' => 'form',
      'file' => 'commerce_yandex_market.theme.inc',
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function commerce_yandex_market_element_info() {
  $types['commerce_yandex_market_data_selection'] = array(
    '#input' => TRUE,
    '#pre_render' => array('form_pre_render_conditional_form_element'),
    '#process' => array('commerce_yandex_market_data_selection_process', 'ajax_process_form'),
    '#theme' => 'commerce_yandex_market_autocomplete',
  );

  return $types;
}

/**
 * FAPI process callback for the data selection widget.
 * This finalises the auto completion callback path by appending the form build
 * id.
 */
function commerce_yandex_market_data_selection_process($element, &$form_state, $form) {
  $form_state['cache'] = TRUE;
  return $element;
}

/**
 * Provides multistep form for create/edit product settings.
 *
 * @param $form
 * @param $form_state
 * @param bool $show_navigation
 * @param string $class
 * @return array
 */
function commerce_yandex_market_add_form($form, &$form_state, $show_navigation = TRUE, $class = '') {
  $form['#prefix'] = '<div id="commerce-yandex-market-form-wrapper" class="' . $class . '">';
  $form['#suffix'] = '</div>';

  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
  }
  $step = $form_state['storage']['step'];

  if ($show_navigation) {
    $navigation = array();
    $navigation[] = t('Basic settings');
    $navigation[] = t('Export settings');

    // Wrap current navigation item in <span>.
    $navigation[$step - 1] = '<span class="current-nav-item">' . $navigation[$step - 1] . '</span>';

    $form['navigation'] = array(
      '#type' => 'item',
      '#markup' => implode(' Â» ', $navigation),
    );
  }

  $form_build_function = '';
  switch ($step) {
    case 1:
      $form_build_function = 'basic_settings';
      break;

    case 2:
      $form_build_function = 'export_settings';
      break;
  }

  // Provide default submit callback for all forms.
  $form['#submit'][] = 'commerce_yandex_market_add_form_submit';

  // Attach styles to form.
  $form['#attached']['css'][] = drupal_get_path('module', 'commerce_yandex_market') . '/css/commerce-yandex-market.css';

  // Build form according to current step.
  $function = '_commerce_yandex_market_form_step_' . $form_build_function;
  if (function_exists($function)) {
    $function($form, $form_state);
  }

  return $form;
}

/**
 * Submit callback for commerce_yandex_market_add_form.
 *
 * @param $form
 * @param $form_state
 */
function commerce_yandex_market_add_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  if (!empty($form_state['storage']['display_type']) && !empty($values['display_type'])) {
    // Move temporary cache to new storage if display type was changed.
    if ($form_state['storage']['display_type'] != $values['display_type']) {
      $display = commerce_yandex_market_object_cache_get($form_state['storage']['display_type']);
      commerce_yandex_market_object_cache_clear($form_state['storage']['display_type']);
      commerce_yandex_market_object_cache_set($values['display_type'], $display);
      $form_state['storage']['display_type'] = $values['display_type'];
    }
  }
  elseif (isset($values['display_type'])) {
    // Save display type in form storage.
    $form_state['storage']['display_type'] = $values['display_type'];
  }

  // Get current display_type.
  $display_type = $form_state['storage']['display_type'];

  // Update cache.
  $display = commerce_yandex_market_object_cache_get($display_type);
  if (empty($display)) {
    // Initialize cache data.
    $display = array();
  }
  // Merge data into cache storage.
  $display = array_merge((array) $display, $values);

  commerce_yandex_market_object_cache_set($display_type, $display);

  // Switch current step.
  if (isset($values['next']) && $values['op'] == $values['next']) {
    $form_state['storage']['step']++;
  }
  elseif (isset($values['prev']) && $values['op'] == $values['prev']) {
    $form_state['storage']['step']--;
  }
  elseif (isset($values['finish']) && $values['op'] == $values['finish']) {
    $form_state['rebuild'] = FALSE;
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback for commerce_yandex_market_add_form.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function commerce_yandex_market_add_form_ajax_callback($form, $form_state) {
  // Simple reload form.
  return $form;
}

/**
 * Ajax callback for last step of product export settings.
 * Saves new attributes and values.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function _commerce_yandex_market_add_form_finish_ajax_callback($form, &$form_state) {
  if (!form_get_errors()) {
    // Save display from cache to permanent storage.
    $display = commerce_yandex_market_object_cache_get($form_state['storage']['display_type']);
    commerce_yandex_market_save($display);
    drupal_set_message(filter_xss(t('New product display !name was created.', array('!name' => $display->display_type))));

    // Redirect user to page with product display list.
    ctools_include('ajax');

    // Ajax responder not required since CTools 7.x-1.0 but this line
    // should be added to keep module works properly.
    ctools_add_js('ajax-responder');

    $commands = array();
    $commands[] = ctools_ajax_command_redirect('admin/commerce/yandex-market');
    return array('#type' => 'ajax', '#commands' => $commands);
  }
  return $form;
}

/**
 * First step.
 * Provide form with basic settings.
 *
 * @param $form
 * @param $form_state
 */
function _commerce_yandex_market_form_step_basic_settings(&$form, &$form_state) {
  // Load product displays.
  $displays = commerce_yandex_market_load_all();

  $options = array();
  foreach (node_type_get_types() as $type) {
    if (!isset($displays[$type->type])) {
      $options[$type->type] = $type->name;
    }
  }

  if (empty($options)) {
    $form['empty']['#markup'] = t('There are no displays to export.');
    return $form;
  }

  $form['display_type'] = array(
    '#type' => 'select',
    '#title' => t('Product Display'),
    '#description' => t('Node type used as product display for export to Yandex Market'),
    '#required' => TRUE,
    '#options' => $options,
  );

  $form['#submit'][] = '_commerce_yandex_market_form_step_basic_settings_submit';

  if (!empty($form_state['storage']['display_type'])) {
    _commerce_yandex_market_form_apply_default_values($form, $form_state['storage']['display_type']);
  }

  _commerce_yandex_market_form_attach_buttons($form, array('next'), 'commerce_yandex_market_add_form');
}

/**
 * Submit function for basic settings form (first step).
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _commerce_yandex_market_form_step_basic_settings_submit($form, &$form_state) {
  // Load display from the cache.
  $display = commerce_yandex_market_object_cache_get($form_state['storage']['display_type']);
  if (empty($display)) {
    return;
  }

  commerce_yandex_market_object_cache_set($form_state['storage']['display_type'], $display);
}

/**
 * Second step.
 * Provide form for export settings.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _commerce_yandex_market_form_step_export_settings(&$form, &$form_state) {

  // Load display from the cache.
  $display = commerce_yandex_market_object_cache_get($form_state['storage']['display_type']);

  if (empty($display)) {
    return;
  }

  $form['available'] = array(
    '#type' => 'commerce_yandex_market_data_selection',
    '#title' => t('Available'),
    '#required' => TRUE,
    '#default_value' => isset($display->available) ? $display->available : '',
    '#autocomplete_path' => 'commerce_yandex_market/' . $form_state['storage']['display_type'],
    '#size' => 50,
  );

  $form['export_table'] = array(
    '#tree' => TRUE,
  );

  $attributes = commerce_yandex_market_load_offers_attr_list();
  // Initialize default amount of rows for attributes and values.
  if (empty($form_state['storage']['rows_count'])) {
    $form_state['storage']['rows_count'] = count($attributes);
  }

  $i = 0;
  foreach ($attributes as $name => $value) {
    $form['export_table'][$i]['attr'] = array(
      '#type' => 'hidden',
      '#value' => $name,
    );

    $form['export_table'][$i]['attr_title'] = array(
      '#markup' => format_string('@title !required', array(
        '@title' => $value['title'],
        '!required' => $value['required'] ? theme('form_required_marker') : '',
      )),
    );

    $form['export_table'][$i]['attr_value'] = array(
      '#type' => 'commerce_yandex_market_data_selection',
      '#required' => $value['required'],
      '#default_value' => isset($display->export_values[$i]) ? $display->export_values[$i] : '',
      '#autocomplete_path' => 'commerce_yandex_market/' . $form_state['storage']['display_type'],
      '#size' => 50,
    );

    $i++;
  }

  // If display already has attributes and values we should build appropriate amount of rows.
  if (isset($display->export_attributes)) {
    $count = count($display->export_attributes);
    if ($count > $form_state['storage']['rows_count']) {
      $form_state['storage']['rows_count'] = $count;
    }
  }

  for ($i = count($attributes); $i < $form_state['storage']['rows_count']; $i++) {
    // Unique hash required for updating form values in browser when deleting attribute and value row.
    $unique_hash = md5(rand());

    $form['export_table'][$unique_hash]['attr'] = array(
      '#type' => 'hidden',
      '#value' => 'param',
    );

    $form['export_table'][$unique_hash]['attr_title'] = array(
      '#markup' => format_string('@title', array(
        '@title' => t('Param'),
      )),
    );

    $form['export_table'][$unique_hash]['attr_param_name'] = array(
      '#prefix' => '<div class="form-item-inline">',
      '#suffix' => '</div>',
      '#type' => 'textfield',
      '#title' => t('Param name'),
      '#default_value' => isset($display->export_attributes[$i]['attr_param_name']) ? $display->export_attributes[$i]['attr_param_name'] : '',
      '#size' => 20,
    );

    $form['export_table'][$unique_hash]['attr_param_unit'] = array(
      '#type' => 'textfield',
      '#title' => t('Param unit'),
      '#default_value' => isset($display->export_attributes[$i]['attr_param_unit']) ? $display->export_attributes[$i]['attr_param_unit'] : '',
      '#size' => 20,
    );

    $form['export_table'][$unique_hash]['attr_value'] = array(
      '#type' => 'commerce_yandex_market_data_selection',
      '#default_value' => isset($display->export_values[$i]) ? $display->export_values[$i] : '',
      '#autocomplete_path' => 'commerce_yandex_market/' . $form_state['storage']['display_type'],
      '#size' => 50,
    );

    $form['export_table'][$unique_hash]['delete'] = array(
      '#name'  => 'delete_' . $unique_hash,
      '#type'  => 'submit',
      '#value' => t('Delete'),
      '#ajax'  => array(
        'callback' => '_commerce_yandex_market_form_step_export_settings_ajax',
        'wrapper'  => 'commerce-yandex-market-form-wrapper',
      ),
    );
  }

  // Button allows add new empty attr and value row.
  $form['more'] = array(
    '#type' => 'submit',
    '#value' => t('Add param'),
    '#ajax' => array(
      'callback' => '_commerce_yandex_market_form_step_export_settings_ajax',
      'wrapper' => 'commerce-yandex-market-form-wrapper',
    ),
  );

  $form['#submit'][] = '_commerce_yandex_market_form_step_export_settings_submit';

  _commerce_yandex_market_form_attach_buttons($form, array('prev', 'finish'), 'commerce_yandex_market_add_form');
}

/**
 * Submit callback for export settings form (second step).
 *
 * @param $form
 * @param $form_state
 */
function _commerce_yandex_market_form_step_export_settings_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Remove row when DELETE button submitted.
  $delete = array_search(t('Delete'), $values, TRUE);
  if ($delete !== FALSE) {
    $deleted_key = drupal_substr($delete, 7);
    unset($values['export_table'][$deleted_key]);
    unset($form['export_table'][$deleted_key]);
    $form_state['storage']['rows_count']--;
    $form_state['rebuild'] = TRUE;
  }

  // Action for ADD MORE button.
  if (isset($values['more']) && isset($values['op']) && $values['op'] == $values['more']) {
    $form_state['storage']['rows_count']++;
    $form_state['rebuild'] = TRUE;
  }

  // Rebuild export attributes and values.
  $export_attributes = array();
  $export_values = array();
  foreach ($values['export_table'] as $value) {
    if ($value['attr'] != 'param') {
      $export_attributes[] = $value['attr'];
    }
    else {
      $export_attributes[] = array(
        'attr' => $value['attr'],
        'attr_param_name' => $value['attr_param_name'],
        'attr_param_unit' => $value['attr_param_unit'],
      );
    }

    $export_values[] = $value['attr_value'];
  }

  // Update attributes and values in cache.
  $display_type = $form_state['storage']['display_type'];
  $display = commerce_yandex_market_object_cache_get($display_type);
  $display->export_attributes = $export_attributes;
  $display->export_values = $export_values;
  commerce_yandex_market_object_cache_set($display_type, $display);
}

/**
 * Ajax callback for ADD MORE button.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _commerce_yandex_market_form_step_export_settings_ajax($form, $form_state) {
  // Simple form reload.
  return $form;
}

/**
 * Add default values to form if presented.
 *
 * @param $form
 *   Form to which values will be applied from cache.
 * @param $display_type
 *   Display type to export.
 */
function _commerce_yandex_market_form_apply_default_values(&$form, $display_type) {
  $display = commerce_yandex_market_object_cache_get($display_type);
  if (empty($display)) {
    return;
  }

  // Try to apply values from cache to form.
  foreach (array_keys($form) as $key) {
    if (!empty($display->{$key}) && is_array($display->{$key})) {
      foreach ($display->{$key} as $array_key => $value) {
        $form[$key][$array_key]['#default_value'] = $value;
      }
    }
    elseif (!empty($display->{$key})) {
      $form[$key]['#default_value'] = $display->{$key};
    }
  }
}

/**
 * Attach ajax-processed buttons to the form.
 *
 * @param $form
 *   Form which will be added to the button.
 * @param array $buttons
 *   Array with buttons that should be added ('prev', 'next', 'finish').
 * @param $form_name
 *   Name of form that added buttons.
 */
function _commerce_yandex_market_form_attach_buttons(&$form, $buttons = array(), $form_name) {

  if ($form_name == 'commerce_yandex_market_add_form' || $form_name == 'commerce_yandex_market_edit_form') {
    $form_wrapper = 'commerce-yandex-market-form';
  }
  else {
    $form_wrapper = str_replace('_', '-', $form_name);
  }

  // Default part for all buttons.
  $base = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => $form_name . '_ajax_callback',
      'wrapper' => $form_wrapper . '-wrapper',
    ),
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );

  if (in_array('prev', $buttons)) {
    $form['actions']['prev'] = array(
        '#value' => t('Back'),
        // Do not validate form when BACK button clicked.
        '#limit_validation_errors' => array(),
        '#submit' => array($form_name . '_submit'),
      ) + $base;
  }

  if (in_array('next', $buttons)) {
    $form['actions']['next'] = array(
        '#value' => t('Continue'),
      ) + $base;
  }

  if (in_array('finish', $buttons)) {
    $form['actions']['finish'] = array(
        '#value' => t('Finish'),
      ) + $base;

    if ($form_name == 'commerce_yandex_market_add_form') {
      $form['actions']['finish']['#ajax']['callback'] = '_commerce_yandex_market_add_form_finish_ajax_callback';
    }
  }
}

/**
 * Form for editing display.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function commerce_yandex_market_edit_form($form, &$form_state) {

  // Load form for creation of display but with existing display in cache.
  $form = commerce_yandex_market_add_form($form, $form_state, FALSE, 'edit-form');

  // Set two submit buttons for every form.
  $form['actions'] = array(
    '#type' => 'action',
    '#weight' => 100,
  );

  $base = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'commerce_yandex_market_edit_form_ajax_callback',
      'wrapper' => 'commerce-yandex-market-form-wrapper',
    ),
  );

  $form['actions']['update'] = array(
      '#value' => t('Update')
    ) + $base;

  $form['actions']['update_save'] = array(
      '#value' => t('Update and Save')
    ) + $base;

  $form['#submit'][] = 'commerce_yandex_market_edit_form_submit';

  return $form;
}

/**
 * Submit callback for path display EDIT form.
 *
 * @param $form
 * @param $form_state
 */
function commerce_yandex_market_edit_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  if (isset($values['op'])) {
    if (isset($values['update']) && $values['op'] == $values['update']) {
      // If user clicks UPDATE button display will be automatically moved to cache.
      // We just need to show user some notifications.
      drupal_set_message(t('The display has been updated.'));
      drupal_set_message(t('Changes will not be permanent until you save it.'), 'warning');
    }
    elseif (isset($values['update_save']) && $values['op'] == $values['update_save']) {
      $display = commerce_yandex_market_object_cache_get($form_state['storage']['display_type']);
      commerce_yandex_market_update($display);
      drupal_set_message(t('Display %name was updated.', array('%name' => $display->display_type)));
    }
  }
}

/**
 * Ajax callback for display EDIT form.
 * Redirect user to displays list when display is updated.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function commerce_yandex_market_edit_form_ajax_callback($form, $form_state) {
  if (!form_get_errors()) {
    $values = $form_state['values'];
    if (isset($values['update_save']) && $values['op'] == $values['update_save']) {

      // Redirect user to page with displays list.
      ctools_include('ajax');

      // Ajax responder not required since CTools 7.x-1.0 but this line
      // should be added to keep module works properly.
      ctools_add_js('ajax-responder');

      $commands = array();
      $commands[] = ctools_ajax_command_redirect('admin/commerce/yandex-market');
      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }

  return $form;
}

/**
 * Form for deletion display from database.
 *
 * @param $form
 * @param $form_state
 * @param $display
 *   Object with attributes.
 * @return array
 */
function commerce_yandex_market_delete_form($form, $form_state, $display) {
  $form['display_type'] = array(
    '#type' => 'value',
    '#value' => $display->display_type,
  );

  $form['message'] = array(
    '#markup' => t('Are you sure that you want to delete %name from database?', array('%name' => $display->display_type)),
  );

  $form['actions'] = array(
    '#type' => 'actions'
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
  );

  return $form;
}

/**
 * Submit callback for deletion form.
 * Removes display from database.
 *
 * @param $form
 * @param $form_state
 */
function commerce_yandex_market_delete_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Delete display.
  if ($values['op'] == $values['submit']) {
    commerce_yandex_market_delete($values['display_type']);
    drupal_set_message(t('Display was successfully deleted.'));
  }

  // Redirect to the settings page.
  $form_state['redirect'] = 'admin/commerce/yandex-market';
}

/**
 * Load attributes list allowed to export.
 *
 * @return array
 */
function commerce_yandex_market_load_offers_attr_list() {
  return array(
    'url' => array(
      'title' => t('Product URL'),
      'required' => TRUE,
    ),
    'price' => array(
      'title' => t('Product price'),
      'required' => TRUE,
    ),
    'currencyId' => array(
      'title' => t('Product Currency ID'),
      'required' => TRUE,
    ),
    'categoryId' => array(
      'title' => t('Product Category ID'),
      'required' => TRUE,
    ),
    'picture' => array(
      'title' => t('Link to image'),
      'required' => FALSE,
    ),
    'store' => array(
      'title' => t('Retail store'),
      'required' => FALSE,
    ),
    'pickup' => array(
      'title' => t('Pickup'),
      'required' => FALSE,
    ),
    'delivery' => array(
      'title' => t('Delivery'),
      'required' => FALSE,
    ),
    'local_delivery_cost' => array(
      'title' => t('Local delivery cost'),
      'required' => FALSE,
    ),
    'name' => array(
      'title' => t('Product name'),
      'required' => TRUE,
    ),
    'vendor' => array(
      'title' => t('Vendor'),
      'required' => FALSE,
    ),
    'vendorCode' => array(
      'title' => t('Vendor code'),
      'required' => FALSE,
    ),
    'description' => array(
      'title' => t('Description'),
      'required' => FALSE,
    ),
    'sales_notes' => array(
      'title' => t('Sales notes'),
      'required' => FALSE,
    ),
    'manufacturer_warranty' => array(
      'title' => t('Manufacturer warranty'),
      'required' => FALSE,
    ),
    'country_of_origin' => array(
      'title' => t('Country of origin'),
      'required' => FALSE,
    ),
    'adult' => array(
      'title' => t('Adult'),
      'required' => FALSE,
    ),
    'age' => array(
      'title' => t('Age'),
      'required' => FALSE,
    ),
    'barcode' => array(
      'title' => t('Barcode'),
      'required' => FALSE,
    ),
  );
}

/**
 * Cache Yandex Market display.
 *
 * @param $display_type
 *   Display type to export.
 * @param $display
 *   Display to store.
 */
function commerce_yandex_market_object_cache_set($display_type, $display) {
  ctools_include('object-cache');
  $display = (object) $display;
  ctools_object_cache_set('commerce_yandex_market', $display_type, $display);
}

/**
 * Get Yandex Market display from cache.
 *
 * @param $display_type
 *   Display type to export.
 * @param bool $skip_cache
 *   Skip current cache or not.
 * @return object
 *   Return cached object.
 */
function commerce_yandex_market_object_cache_get($display_type, $skip_cache = FALSE) {
  ctools_include('object-cache');
  return ctools_object_cache_get('commerce_yandex_market', $display_type, $skip_cache);
}

/**
 * Clear ctools object cache.
 *
 * @param $display_type
 *   Display type to export.
 */
function commerce_yandex_market_object_cache_clear($display_type) {
  ctools_include('object-cache');
  ctools_object_cache_clear('commerce_yandex_market', $display_type);
}

/**
 * Load display object for UI editing.
 *
 * @param $display_type
 * @return bool|object
 */
function commerce_yandex_market_cache_load($display_type) {
  $display = commerce_yandex_market_object_cache_get($display_type);

  if (empty($display)) {
    // If there is no cache load original object.
    $display = commerce_yandex_market_load_by_name($display_type);
  }

  return empty($display) ? FALSE : $display;
}

/**
 * Save display.
 *
 * @param $display
 *   Object with attributes data.
 * @param int $status
 *   Boolean indicating whether the display is exportable
 */
function commerce_yandex_market_save($display, $status = COMMERCE_YANDEX_MARKET_ENABLED) {
  $display->status = $status;

  $display->data = array(
    'available' => $display->available,
    'export_attributes' => $display->export_attributes,
    'export_values' => $display->export_values,
  );

  if ($result = drupal_write_record('commerce_yandex_market', $display)) {
    // Remove data from ctools object cache table.
    commerce_yandex_market_object_cache_clear($display->display_type);
    return TRUE;
  }

  return FALSE;
}
/**
 * Update display.
 *
 * @param $display
 *   Object with attributes data.
 */
function commerce_yandex_market_update($display) {
  $display->data = array(
    'available' => $display->available,
    'export_attributes' => $display->export_attributes,
    'export_values' => $display->export_values,
  );

  if ($result = drupal_write_record('commerce_yandex_market', $display, 'display_id')) {
    // Remove data from ctools object cache table.
    commerce_yandex_market_object_cache_clear($display->display_type);
    return TRUE;
  }
  return FALSE;
}

/**
 * Load all product displays from database and code.
 *
 * @return array
 *    Array of product displays.
 */
function commerce_yandex_market_load_all() {
  $result = db_select('commerce_yandex_market', 'ym')
    ->fields('ym', array('display_id', 'display_type', 'data', 'status'))
    ->execute();

  $displays = array();
  foreach ($result as $record) {
    $displays[$record->display_type] = commerce_yandex_market_load_prepare((array) $record);
  }

  return $displays;
}

/**
 * Load display by display type.
 *
 * @param $display_type
 *   Display type to export.
 * @return object
 *   Object with display.
 */
function commerce_yandex_market_load_by_name($display_type) {
  $result = db_select('commerce_yandex_market', 'ym')
    ->fields('ym', array('display_id', 'display_type', 'data', 'status'))
    ->condition('ym.display_type', $display_type)
    ->execute()
    ->fetchAssoc();

  $display = FALSE;
  if (!empty($result)) {
    $display = commerce_yandex_market_load_prepare($result);
  }
  return $display;
}

/**
 * Prepare raw object to normal display object.
 *
 * @param $display_raw
 *    Object loaded from database.
 * @return object $display.
 */
function commerce_yandex_market_load_prepare($display_raw) {
  // Merge display data with parent for more flattening structure.
  $display = (object) array_merge((array) $display_raw, unserialize($display_raw['data']));
  $display->status = $display_raw['status'];
  unset($display->data);

  return $display;
}

/**
 * Delete display.
 *
 * @param  $display_type
 *   Display type to export.
 */
function commerce_yandex_market_delete($display_type) {
  $display = commerce_yandex_market_load_by_name($display_type);

  db_delete('commerce_yandex_market')
    ->condition('display_type', $display_type)
    ->execute();

  commerce_yandex_market_object_cache_clear($display_type);
}

/**
 * Ctools export callback.
 *
 * @param $display
 *   Display type to export.
 * @param $indent
 * @return string
 */
function commerce_yandex_market_export($display, $indent) {
  $data = array(
    'available' => $display->available,
    'export_attributes' => $display->export_attributes,
    'export_values' => $display->export_values,
  );

  $display->data = serialize($data);

  return ctools_export_object('commerce_yandex_market', $display, $indent);
}

/**
 * Generate YML file.
 */
function commerce_yandex_market_generate_page() {
  try {
    commerce_yandex_market_check_directory();

    $writer = new XMLCommerceYandexMarketWriter();
    $writer->startDocument();
    $writer->generateXML();
    $writer->endDocument();
  }
  catch (Exception $e) {
    watchdog_exception('commerce_yandex_market', $e);
    throw $e;
  }
}

/*
 * Get categories for export.
 *
 * @return array
 *   Vocabularies to export.
 */
function _commerce_yandex_market_get_selected_categories() {
  $vids = variable_get('commerce_yandex_market_categories', array());
  $selected_vids = array();
  foreach ($vids as $vid) {
    if ($vid) {
      $selected_vids[] = $vid;
    }
  }
  return $selected_vids;
}

/**
 * Check that the commerce_yandex_market files directory exists and is writable.
 */
function commerce_yandex_market_check_directory() {
  $directory = COMMERCE_YANDEX_MARKET_DIRECTORY;
  $result = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  if (!$result) {
    watchdog('file system', 'The directory %directory does not exist or is not writable.', array('%directory' => $directory), WATCHDOG_ERROR);
  }
  return $result;
}
